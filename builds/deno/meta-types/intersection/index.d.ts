import { DoesExtend, Get } from "../../utils/index.d.ts";
import { Resolve, MetaType, Never, Error } from "../index.d.ts";
import { ErrorType } from "../error.d.ts";
import { IntersectConst } from "./const.d.ts";
import { IntersectEnum } from "./enum.d.ts";
import { IntersectPrimitive } from "./primitive.d.ts";
import { ClearArrIntersections, IntersectArr } from "./array.d.ts";
import { ClearTupleIntersections, IntersectTuple } from "./tuple.d.ts";
import { ClearObjectIntersections, IntersectObject } from "./object.d.ts";
import { ClearUnionIntersections, IntersectUnion } from "./union.d.ts";
import { ClearExclusionIntersections, IntersectExclusion } from "./exclusion.d.ts";
import { IsRepresentable } from "../utils.d.ts";
export declare type IntersectionType = "intersection";
export declare type Intersection<L, R> = {
    type: IntersectionType;
    left: L;
    right: R;
};
export declare type IsIntersection<I> = DoesExtend<Get<I, "type">, IntersectionType>;
export declare type Left<I> = Get<I, "left">;
export declare type Right<I> = Get<I, "right">;
export declare type ResolveIntersection<T> = Resolve<ClearIntersections<T>>;
export declare type ClearIntersections<T> = {
    any: T;
    never: T;
    const: T;
    enum: T;
    primitive: T;
    array: ClearArrIntersections<T>;
    tuple: ClearTupleIntersections<T>;
    object: ClearObjectIntersections<T>;
    union: ClearUnionIntersections<T>;
    intersection: Intersect<ClearIntersections<Left<T>>, ClearIntersections<Right<T>>>;
    exclusion: ClearExclusionIntersections<T>;
    error: T;
    errorMissingType: Error<"Missing type property">;
}[Get<T, "type"> extends MetaType ? Get<T, "type"> : "errorMissingType"];
export declare type Intersect<A, B> = {
    any: B;
    never: Get<B, "type"> extends ErrorType ? B : Never;
    const: IntersectConst<A, B>;
    enum: IntersectEnum<A, B>;
    primitive: IntersectPrimitive<A, B>;
    array: IntersectArr<A, B>;
    tuple: IntersectTuple<A, B>;
    object: IntersectObject<A, B>;
    union: IntersectUnion<A, B>;
    intersection: Error<"Cannot intersect intersection">;
    exclusion: IntersectExclusion<A, B>;
    error: A;
    errorMissingType: Error<"Missing type property">;
}[Get<A, "type"> extends MetaType ? Get<A, "type"> : "errorMissingType"];
export declare type IsIntersectionRepresentable<A> = IsRepresentable<ClearIntersections<A>>;
